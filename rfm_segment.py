# -*- coding: utf-8 -*-
"""RFM_segment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/164uxoy9HEVXKgeospCsw1WBHkXr_ljgS

MỤC TIÊU: Hỗ trợ doanh nghiệp phát triển sản phẩm dựa trên từng phân khúc khách hàng, đưa ra giải pháp marketing cho từng phân khúc khách hàng tại từng khu vực dựa trên kết quả phân tích và kiến thức về kinh doanh.

CÁC BƯỚC THỰC HIỆN: Thực hiện phân tích dựa trên 6 bước trong phân tích dữ liệu: ASK, PREPARE, PROCESS, ANALYZE, SHARE, ACT

# ASK

Từ bộ dữ liệu sẵn có đưa ra được các chiến lược cho doanh nghiệp nhằm giữ chân các khách hàng thân thiết (khách hàng hạng vàng) và đưa ra các giải pháp gắn kết hơn với các khách hàng hạng bạc nhằm nâng hạng các khách hạng bạc lên vàng. Còn  đối với các khách hàng hạng đồng đưa ra được các giải pháp làm cho khách hàng quay lại với doanh nghiệp, tích cực hơn với nhóm khách hàng này nhằm tạo ấn tượng tốt để khách hàng tin tưởng hơn.

# PREPARE

Chuẩn bị dữ liệu:
1. Import các thư viện cần thiết
2. Đọc dữ liệu từ file CSV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly as py
import plotly.graph_objs as go
import warnings
import os
import datetime as dt
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/Auto Sales data.csv')

df.head()

"""Dữ liệu bao gồm các thông tin chi tiết về doanh thu và doanh số bán hàng, hóa đơn bán hàng và giá trị của mỗi đơn hàng. Dựa trên số liệu giao dịch bán lẻ từ ngày đến ngày

DATA DICTIONARY:

*   ORDERNUMBER: Mã đơn hàng
*   QUANTITYORDERED: Tổng sản phẩm trong đơn hàng
*   PRICEEACH: Gía mỗi sản phẩm
*   SALES: Tổng giá trị hóa đơn
*   ORDERDATE: Ngày mua hàng
*   DAY_SINCE_LAST_ORDER: Ngày mua hàng gần nhất kể từ ngày xuất dữ liệu
*   STATUS: Trạng thái
*   PRODUCTLINE: Dòng sản phẩm
*   PRODUCTCODE: Mã sản phẩm
*   CUSTOMERNAME: Tên khách hàng
*   PHONE: Số điện thoại
*   CITY: Thành phố
*   COUNTRY: Khu vực
*   DEALSIZE: Quy mô của từng đơn hàng

# PROCESS: Exploratory Data Analysis

Tiền xử lý dữ liệu:

1.   Kiểm tra kiểu dữ liệu
2.   Xác định số hàng, số cột
3.   Xử lý dữ liệu bị khuyết thiếu, giá trị null, duplicate,...
4.   Xử lý dữ liệu ngoại lai
"""

print(type(df))

df.shape

df.info()

df.describe()

df.isnull().sum()

"""# ANALYZE

Phân tích và phân khúc khách hàng dựa trên mô hình RFM

Mô hình RFM Cho phép phân khúc khách hàng dựa trên tần suất mua hàng và giá trị mua hàng và cũng giúp xác định khách hàng chi nhiều tiền nhất
*   RECENCY: Thời gian kể từ lần mua hàng gần nhất
*   FREQUENCY: Tần suất khách hàng mua hàng
*   MONETARY: Tổng giá trị mua hàng của khách hàng

## Phân tích sơ bộ
"""

df_country = df.groupby('COUNTRY').size()
df_country

df_country = pd.DataFrame(df_country)
df_country

df_country.info()

df_country = df_country.reset_index()

df_country.info()

print(df_country.columns) #0 KHÔNG PHẢI LÀ TÊN CỘT

df_country = df_country.rename(columns={0:'VALUES'})

df_country = df_country.sort_values(by='VALUES',ascending=False).reset_index()

print(df['SALES'].dtype)

df_country_sales = df.groupby(by='COUNTRY').agg({'SALES': 'sum'})
df_country_sales = df_country_sales.sort_values(by='SALES',ascending=False).reset_index()
# sắp xếp lại
# mức chi tiêu từng khu vực

df_dealsize = df.groupby('DEALSIZE').size()
df_dealsize = pd.DataFrame(df_dealsize)
df_dealsize = df_dealsize.reset_index()
df_dealsize.info()
lbls = df_dealsize['DEALSIZE'].values.tolist()
so_luong = df_dealsize[0].values.tolist()

df_ordernumber_value = df.groupby(by='ORDERNUMBER').agg({'SALES':'sum'})
df_ordernumber_value

"""## RECENCY"""

df['ORDERDATE'] = pd.to_datetime(df['ORDERDATE'])

df['ORDERDATE'].max()

today = dt.datetime(2020,12,1)

df_recency = df[['CUSTOMERNAME', 'ORDERDATE']]
df_recency = df_recency.groupby(by='CUSTOMERNAME').max()
df_recency['Recency'] = today - df_recency.groupby(by='CUSTOMERNAME').max()
df_recency

df_recency.drop(['ORDERDATE'], axis = 1, inplace = True)
df_recency

"""## Frequency"""

df_frequency = df[['CUSTOMERNAME','ORDERNUMBER']]
df_frequency = df_frequency.groupby(by='CUSTOMERNAME').agg({'ORDERNUMBER':'nunique'})
df_frequency.rename(columns = {'ORDERNUMBER':'Frequency'}, inplace = True)
df_frequency

"""## MONETARY"""

df_monetary = df.groupby(by='CUSTOMERNAME').agg({'SALES':'sum'})
df_monetary.rename(columns = {'SALES':'Monetary'}, inplace = True)
df_monetary

"""## RFM"""

df_rfm = pd.concat([df_recency, df_frequency, df_monetary], axis =1)
df_rfm

df_rfm['Recency_Score'] = pd.qcut(df_rfm['Recency'], 4, labels = [4, 3, 2, 1])
df_rfm['frequency_Score'] = pd.qcut(df_rfm['Frequency'].rank(method = 'first'), 4, labels = [1, 2, 3, 4])
df_rfm['Monetary_Score'] = pd.qcut(df_rfm['Monetary'], 4 , labels = [1, 2, 3, 4])
df_rfm

df_rfm['RFM_SCORE'] = df_rfm['Monetary_Score'].astype(int) + df_rfm['Recency_Score'].astype(int) + df_rfm['frequency_Score'].astype(int)
df_rfm

def label_customer(RFM_SCORE):
  if RFM_SCORE >= 8:
    return 'Vàng'
  elif RFM_SCORE >= 4:
    return 'Bạc'
  else:
    return 'Đồng'

df_rfm['Label'] = df_rfm.apply(lambda row : label_customer(row['RFM_SCORE']), axis=1)
df_rfm

df_segment = df_rfm[['RFM_SCORE','Label']].groupby(by='Label').sum()

df_segment = df_segment.reset_index()

"""# SHARE

Sử dụng thư viện matplotlip để tạo trực quan hóa dữ liệu, trình bày những insight thu được một cách dễ hiệu cho người đọc
"""

plt.figure(figsize=(10, 6))
sns.barplot(data=df_country, x= df_country['VALUES'], y=df_country['COUNTRY'], palette = "Greens_d")
plt.title('Số lượng đơn đặt hàng của từng khu vực')
# Sắp xếp lại

"""Số lượng đơn đặt hàng tại khu vực USA là cao nhất thậm chí có cách biệt rất lớn với các khu vực khác, đúng thứ hai là Spain và đứng thứ ba về số lượng đơn đặt hàng là France"""

plt.figure(figsize=(10, 6))
sns.barplot(data=df_country_sales, x= df_country_sales['SALES'], y=df_country_sales['COUNTRY'], palette = "Reds_d")
plt.ylabel('COUNTRY')
plt.title("Biểu đồ so sánh mức chi tiêu của từng khu vực")

plt.pie(so_luong, labels = lbls,autopct = '%1.1f%%')
plt.title('Quy mô của đơn hàng')
plt.show()
#lbls.value.tolist()
# Thêm 1 biểu đồ về giá trị của các qui mô đơn hàng

plt.figure(figsize=(16, 8))
sns.histplot(x='SALES', data = df_ordernumber_value, bins=50, kde=True)
plt.title("Biểu đồ phân phối tổng giá trị của một đơn hàng", fontsize=18)

"""Phần lớn tổng giá trị của đơn hàng giao động từ 40000 đến hơn 50000 thuộc quy mô đơn hàng medium"""

sns.heatmap(df_rfm.corr(), annot=True)

sns.distplot(df_rfm['Recency'])

sns.distplot(df_rfm['Frequency'])

sns.distplot(df_rfm['Monetary'])

labels = df_segment['Label'].values.tolist()
sl = df_segment['RFM_SCORE'].values.tolist()
plt.pie(sl, labels = labels, autopct = '%1.1f%%')
plt.show()
# Chia thành các phân khúc nhỏ hơn

"""# ACT

Dựa trên kết quả đã phân tích đưa ra các giải pháp cho doanh nghiệp

* **Khuyến nghị dành cho các khách hàng hạng vàng:** Đây là nhóm khách hàng trung thành của doanh nghiệp: tập trung gia tăng lượng mua của khách hàng, có thể đưa ra các chương trình tích điểm đổi voucher, bán theo combo giá hời, chương trình khách hàng thân thiết.
* **Khuyến nghị dành cho các khách hàng bạc:** Ở nhóm khách hàng này tần suất mua hàng không cao và giá trị đơn hàng cũng không quá lớn, doanh nghiệp có thể tập trung vào việc giữ chân nhóm khách hàng này và cải thiện mối quan hệ với nhóm khách hàng này bằng cách hỏi thăm về chất lượng sản phẩm, sản phẩm có còn hoạt động tốt hay không, gửi các email marketing về các sản phẩm mới, các chương trình ưu đãi.
* **Khuyến nghị dành cho các khách hàng đồng:** Nhóm khách hàng này tần suất mua hàng thấp và thời gian kể từ ngày mua hàng gần nhất lớn, đây là nhóm khách hàng có nguy cơ rời bỏ cao. Ở nhóm khách hàng này doanh nghiệp có thể tiến hành chiến lược Remarketing, nâng cao nhận thức của khách hàng về doanh nghiệp, cần đề cao lòng tin của khách hàng, và tạo hình ảnh thương hiệu trong lòng khách hàng.
"""